//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DrawMeshWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DrawMesh), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("DrawTriangle", DrawTriangle);
		L.RegFunction("DrawSquare", DrawSquare);
		L.RegFunction("DrawCircle", DrawCircle);
		L.RegFunction("DrawRing", DrawRing);
		L.RegFunction("Flabellate", Flabellate);
		L.RegFunction("CreateDrawMeshGameObject", CreateDrawMeshGameObject);
		L.RegFunction("MergeMesh", MergeMesh);
		L.RegFunction("DrawRoad", DrawRoad);
		L.RegFunction("CreateRoadRange", CreateRoadRange);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawTriangle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
			UnityEngine.Mesh o = obj.DrawTriangle(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawSquare(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 5);
			UnityEngine.Mesh o = obj.DrawSquare(arg0, arg1, arg2, arg3);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawCircle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
			UnityEngine.Mesh o = obj.DrawCircle(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawRing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 5);
			UnityEngine.Mesh o = obj.DrawRing(arg0, arg1, arg2, arg3);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flabellate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 6);
				UnityEngine.Mesh o = obj.Flabellate(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 7)
			{
				DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 6);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
				UnityEngine.Mesh o = obj.Flabellate(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DrawMesh.Flabellate");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateDrawMeshGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			UnityEngine.Mesh arg1 = (UnityEngine.Mesh)ToLua.CheckObject(L, 3, typeof(UnityEngine.Mesh));
			UnityEngine.GameObject o = obj.CreateDrawMeshGameObject(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MergeMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
			UnityEngine.MeshFilter[] arg0 = ToLua.CheckObjectArray<UnityEngine.MeshFilter>(L, 2);
			UnityEngine.Material arg1 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 3);
			UnityEngine.GameObject o = obj.MergeMesh(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawRoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
			obj.DrawRoad();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateRoadRange(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
				int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
				UnityEngine.Material arg1 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 3);
				UnityEngine.GameObject o = obj.CreateRoadRange(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				DrawMesh obj = (DrawMesh)ToLua.CheckObject<DrawMesh>(L, 1);
				int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
				UnityEngine.Material arg1 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 3);
				UnityEngine.Material arg2 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 4);
				UnityEngine.GameObject o = obj.CreateRoadRange(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DrawMesh.CreateRoadRange");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

