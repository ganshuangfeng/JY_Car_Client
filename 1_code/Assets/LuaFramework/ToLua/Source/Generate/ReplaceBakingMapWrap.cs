//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ReplaceBakingMapWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ReplaceBakingMap), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetDay", SetDay);
		L.RegFunction("SetNight", SetNight);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("dayLightMap", get_dayLightMap, set_dayLightMap);
		L.RegVar("dayLightDir", get_dayLightDir, set_dayLightDir);
		L.RegVar("nightLightMap", get_nightLightMap, set_nightLightMap);
		L.RegVar("nightLightDir", get_nightLightDir, set_nightLightDir);
		L.RegVar("mapMat", get_mapMat, set_mapMat);
		L.RegVar("F", get_F, set_F);
		L.RegVar("DayOrNight", get_DayOrNight, set_DayOrNight);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)ToLua.CheckObject<ReplaceBakingMap>(L, 1);
			obj.SetDay();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)ToLua.CheckObject<ReplaceBakingMap>(L, 1);
			obj.SetNight();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dayLightMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Texture2D> ret = obj.dayLightMap;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dayLightMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dayLightDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Texture2D> ret = obj.dayLightDir;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dayLightDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nightLightMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Texture2D> ret = obj.nightLightMap;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nightLightMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nightLightDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Texture2D> ret = obj.nightLightDir;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nightLightDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mapMat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Material> ret = obj.mapMat;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mapMat on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_F(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			float ret = obj.F;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index F on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DayOrNight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			UnityEngine.Animator ret = obj.DayOrNight;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DayOrNight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dayLightMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Texture2D> arg0 = (System.Collections.Generic.List<UnityEngine.Texture2D>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Texture2D>));
			obj.dayLightMap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dayLightMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dayLightDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Texture2D> arg0 = (System.Collections.Generic.List<UnityEngine.Texture2D>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Texture2D>));
			obj.dayLightDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dayLightDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nightLightMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Texture2D> arg0 = (System.Collections.Generic.List<UnityEngine.Texture2D>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Texture2D>));
			obj.nightLightMap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nightLightMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nightLightDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Texture2D> arg0 = (System.Collections.Generic.List<UnityEngine.Texture2D>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Texture2D>));
			obj.nightLightDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nightLightDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mapMat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			System.Collections.Generic.List<UnityEngine.Material> arg0 = (System.Collections.Generic.List<UnityEngine.Material>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Material>));
			obj.mapMat = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mapMat on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_F(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.F = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index F on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DayOrNight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ReplaceBakingMap obj = (ReplaceBakingMap)o;
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
			obj.DayOrNight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DayOrNight on a nil value");
		}
	}
}

