//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HighlightingSystem_HighlighterCoreWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HighlightingSystem.HighlighterCore), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("DefaultRendererFilter", DefaultRendererFilter);
		L.RegFunction("SetDirty", SetDirty);
		L.RegFunction("FillBuffer", FillBuffer);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("keywordOverlay", get_keywordOverlay, null);
		L.RegVar("mode", get_mode, set_mode);
		L.RegVar("forceRender", get_forceRender, set_forceRender);
		L.RegVar("color", get_color, set_color);
		L.RegVar("highlighters", get_highlighters, null);
		L.RegVar("opaqueShader", get_opaqueShader, null);
		L.RegVar("transparentShader", get_transparentShader, null);
		L.RegVar("globalRendererFilter", get_globalRendererFilter, set_globalRendererFilter);
		L.RegVar("rendererFilter", get_rendererFilter, set_rendererFilter);
		L.RegFunction("RendererFilter", HighlightingSystem_HighlighterCore_RendererFilter);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DefaultRendererFilter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Renderer arg0 = (UnityEngine.Renderer)ToLua.CheckObject<UnityEngine.Renderer>(L, 1);
			System.Collections.Generic.List<int> arg1 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<int>));
			bool o = HighlightingSystem.HighlighterCore.DefaultRendererFilter(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDirty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HighlightingSystem.HighlighterCore obj = (HighlightingSystem.HighlighterCore)ToLua.CheckObject<HighlightingSystem.HighlighterCore>(L, 1);
			obj.SetDirty();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FillBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Rendering.CommandBuffer arg0 = (UnityEngine.Rendering.CommandBuffer)ToLua.CheckObject<UnityEngine.Rendering.CommandBuffer>(L, 1);
			HighlightingSystem.HighlighterCore.FillBuffer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_keywordOverlay(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, HighlightingSystem.HighlighterCore.keywordOverlay);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HighlightingSystem.HighlighterCore obj = (HighlightingSystem.HighlighterCore)o;
			HighlightingSystem.HighlighterMode ret = obj.mode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_forceRender(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HighlightingSystem.HighlighterCore obj = (HighlightingSystem.HighlighterCore)o;
			bool ret = obj.forceRender;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index forceRender on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HighlightingSystem.HighlighterCore obj = (HighlightingSystem.HighlighterCore)o;
			UnityEngine.Color ret = obj.color;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_highlighters(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, HighlightingSystem.HighlighterCore.highlighters);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_opaqueShader(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, HighlightingSystem.HighlighterCore.opaqueShader);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_transparentShader(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, HighlightingSystem.HighlighterCore.transparentShader);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_globalRendererFilter(IntPtr L)
	{
		try
		{
			ToLua.Push(L, HighlightingSystem.HighlighterCore.globalRendererFilter);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rendererFilter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HighlightingSystem.HighlighterCore obj = (HighlightingSystem.HighlighterCore)o;
			HighlightingSystem.HighlighterCore.RendererFilter ret = obj.rendererFilter;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rendererFilter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HighlightingSystem.HighlighterCore obj = (HighlightingSystem.HighlighterCore)o;
			HighlightingSystem.HighlighterMode arg0 = (HighlightingSystem.HighlighterMode)LuaDLL.luaL_checknumber(L, 2);
			obj.mode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_forceRender(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HighlightingSystem.HighlighterCore obj = (HighlightingSystem.HighlighterCore)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.forceRender = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index forceRender on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HighlightingSystem.HighlighterCore obj = (HighlightingSystem.HighlighterCore)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_globalRendererFilter(IntPtr L)
	{
		try
		{
			HighlightingSystem.HighlighterCore.RendererFilter arg0 = (HighlightingSystem.HighlighterCore.RendererFilter)ToLua.CheckDelegate<HighlightingSystem.HighlighterCore.RendererFilter>(L, 2);
			HighlightingSystem.HighlighterCore.globalRendererFilter = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rendererFilter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HighlightingSystem.HighlighterCore obj = (HighlightingSystem.HighlighterCore)o;
			HighlightingSystem.HighlighterCore.RendererFilter arg0 = (HighlightingSystem.HighlighterCore.RendererFilter)ToLua.CheckDelegate<HighlightingSystem.HighlighterCore.RendererFilter>(L, 2);
			obj.rendererFilter = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rendererFilter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HighlightingSystem_HighlighterCore_RendererFilter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<HighlightingSystem.HighlighterCore.RendererFilter>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<HighlightingSystem.HighlighterCore.RendererFilter>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

